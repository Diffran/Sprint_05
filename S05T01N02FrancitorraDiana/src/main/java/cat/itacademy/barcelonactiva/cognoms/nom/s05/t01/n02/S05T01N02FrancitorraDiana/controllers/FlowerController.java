package cat.itacademy.barcelonactiva.cognoms.nom.s05.t01.n02.S05T01N02FrancitorraDiana.controllers;

import cat.itacademy.barcelonactiva.cognoms.nom.s05.t01.n02.S05T01N02FrancitorraDiana.model.dto.FlowerDTO;
import cat.itacademy.barcelonactiva.cognoms.nom.s05.t01.n02.S05T01N02FrancitorraDiana.model.services.impl.FlowerServiceImpl;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("flower")
@Tag(name = "Flower Controller", description = "Endpoints for managing flowers :)")
public class FlowerController {
    @Autowired
    private FlowerServiceImpl flowerService;


    @PostMapping("/add")
    @Operation(summary = "add flower", description="Add a new flower entity to the database with complete data entry " +
            "required. Only flowerName and flowerCountry are essential inputs; pk_FlowerID and flowerType are " +
            "automatically generated by the program. The flowerCountry must correspond to an existing country;" +
            " otherwise, an exception will be thrown.")
    public ResponseEntity<?> addFlower(@RequestBody FlowerDTO flowerDTO){
        flowerService.create(flowerDTO);
        return ResponseEntity.status(HttpStatus.CREATED).body(flowerDTO);
    }

    @PutMapping("/update")
    @Operation(summary= "update flower", description= "Update an existing flower entity similar to the /add method, " +
            "ensuring that pk_FlowerID exists in the database for proper functionality; otherwise, an exception will" +
            " be thrown. Additionally, flowerCountry must correspond to an existing country, or an exception will be raised.")
    public ResponseEntity<?> updateFlower(@RequestBody FlowerDTO flowerDTO){
        flowerService.update(flowerDTO);
        return ResponseEntity.ok().body(flowerDTO);
    }

    @DeleteMapping("/delete/{id}")
    @Operation(summary = "delete a flower", description = "Delete a flower entity by providing its pk_FlowerID. If " +
            "the specified pk_FlowerID does not exist, the program will throw an exception.")
    public ResponseEntity<?> deleteFlower(@PathVariable("id") Integer flowerId){
        flowerService.delete(flowerId);
        return ResponseEntity.noContent().build();
    }

    @GetMapping("/getOne/{id}")
    @Operation(summary= "get one flower by its ID", description = "Retrieve the details of a flower entity from the " +
            "database based on its pk_FlowerID. If the specified pk_FlowerID does not exist, an exception will be thrown.")
    public ResponseEntity<?> getOneFlower(@PathVariable("id") Integer flowerId){
        return ResponseEntity.ok().body(flowerService.getOne(flowerId));
    }

    @GetMapping("/getAll")
    @Operation(summary = "get all the flowers entities", description = "Retrieve all flower entities stored in the database.")
    public ResponseEntity<List<FlowerDTO>> getAllFlowers(){
        return ResponseEntity.ok().body(flowerService.getAll());
    }

}
